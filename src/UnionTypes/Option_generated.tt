<#@ template compilerOptions="/d:T4" debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="..\Generators\Generator.cs" #>
<#@ include file="..\Generators\UnionGenerator.cs" #>
<#= UnionGenerator.Generate(
    new Union(
        UnionKind.TypeUnion,
        "Option",
        "Option<TValue>",
        "public",
        new[]
        {
            new UnionCase(
                name: "Some", 
                type: "TValue",
                typeKind: TypeKind.TypeParameter_Unconstrained,
                tagValue: 1, 
                factoryName: "Some", 
                factoryParameters: new [] { new UnionCaseValue("value", "TValue", TypeKind.TypeParameter_Unconstrained) },
                accessorName: "Value"),
            new UnionCase(
                name: "None", 
                type: "UnionTypes.None", 
                typeKind: TypeKind.Class,
                tagValue: 0, 
                factoryName:"None", 
                factoryParameters: null, 
                factoryIsProperty: true, 
                hasAccessor: false,
                isSingleton: true)
        },
        UnionOptions.Default
            .WithGenerateMatch(true)
            .WithGenerateEquality(true)
            .WithGenerateToString(true)
        ),
    namespaceName: "UnionTypes"
    )
 #>
